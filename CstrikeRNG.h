// The class simulates the RNG (Random Number Generator) for Counter-Strike 1.6
// It can generate floating-point & integral numbers.
class CCstrikeRNG
{
public:
	template<typename T> requires(std::is_floating_point<T>::value)
	static T RandomFloater(uint32_t Seed, T Low, T High);

	template<typename T> requires(std::is_integral<T>::value)
	static T RandomIntegral(uint32_t Seed, T Low, T High);

private:
	static inline uint32_t AutoSeedorize()
	{
		m_dwSeed *= kMagicConstantMul;
		m_dwSeed += m_dwSeedTable[m_dwSeed & 0xFF] + 1;
		return m_dwSeed & 0xFFFFFFF;
	}

	static inline void Seedorize(uint8_t Seed)
	{
		m_dwSeed = m_dwSeedTable[Seed];
	}

private:
	static const uint32_t m_dwSeedTable[256];
	static uint32_t m_dwSeed;

	static inline constexpr uint32_t kMagicConstantMul = 69069;
};

template<typename T> requires(std::is_floating_point<T>::value)
T CCstrikeRNG::RandomFloater(uint32_t Seed, T Low, T High)
{
	Seedorize(Seed + Low + High);
	AutoSeedorize();
	AutoSeedorize();

	if (High - Low == 0)
		return Low;

	return (Low + (static_cast<double>(AutoSeedorize() & 0xFFFF) * 0.0000152587890625) * (High - Low));
}

template<typename T> requires(std::is_integral<T>::value)
T CCstrikeRNG::RandomIntegral(uint32_t Seed, T Low, T High)
{
	Seedorize(static_cast<uint32_t>(High + Low + Seed));

	if (High == Low)
		return Low;

	return Low + AutoSeedorize() % (High + Low + 1);
}

uint32_t CCstrikeRNG::m_dwSeed = 0;

// The seed table got from decompiled client.dll binary.
const uint32_t CCstrikeRNG::m_dwSeedTable[256] =
{
	0x7139, 0x6A02, 0x6759, 0x24EB, 0x4564, 0x2A9D, 0x7076, 0x220C,
	0x18D9, 0x12F5, 0x4586, 0x55D9, 0x4CBB, 0x50B6, 0x2A52, 0x4E87,
	0x69BB, 0x6FDA, 0x48BF, 0x64F9, 0x2180, 0x667A, 0x5D4F, 0x4734,
	0x7F4B, 0x12E4, 0x0CEA, 0x0713, 0x0BDB, 0x5FEF, 0x47DF, 0x013B,
	0x688E, 0x038B, 0x5E26, 0x3052, 0x25CA, 0x0B9C, 0x28E8, 0x406C,
	0x589B, 0x2D09, 0x6D40, 0x76C6, 0x339D, 0x090F, 0x5C44, 0x41B7,
	0x271D, 0x5CDC, 0x543F, 0x04E3, 0x4C7B, 0x4F59, 0x4741, 0x75B2,
	0x20D2, 0x5147, 0x6ADA, 0x1C01, 0x52DB, 0x438D, 0x1522, 0x4B17,
	0x280F, 0x57D0, 0x6AFC, 0x26DA, 0x3D0C, 0x5F45, 0x439C, 0x0942,
	0x253A, 0x7BC3, 0x6547, 0x5C0F, 0x2DAE, 0x671D, 0x7F5A, 0x3AB7,
	0x474F, 0x44AE, 0x058E, 0x70A3, 0x5C37, 0x3135, 0x507A, 0x279A,
	0x145C, 0x04E4, 0x275A, 0x5A7E, 0x4D6F, 0x7BB3, 0x170E, 0x6036,
	0x4A04, 0x37FA, 0x3A66, 0x22EB, 0x5BF4, 0x533F, 0x579C, 0x5777,
	0x0DFF, 0x714C, 0x7722, 0x491A, 0x10B6, 0x0985, 0x579E, 0x0D6F,
	0x6E99, 0x5A79, 0x6334, 0x349F, 0x4B7C, 0x3BB7, 0x0A03, 0x49D5,
	0x332F, 0x41E3, 0x25F2, 0x37F2, 0x3B5D, 0x6909, 0x4BAC, 0x6681,
	0x7CB5, 0x3930, 0x2CE9, 0x22ED, 0x2748, 0x1933, 0x6FF0, 0x29F1,
	0x3632, 0x43CC, 0x2059, 0x6551, 0x067D, 0x12F2, 0x1D18, 0x31C8,
	0x5542, 0x1565, 0x27B7, 0x4141, 0x6911, 0x2287, 0x78E3, 0x6D4A,
	0x6A93, 0x606D, 0x7E2A, 0x0DC5, 0x306E, 0x7036, 0x2503, 0x27E0,
	0x2690, 0x349B, 0x570F, 0x0948, 0x17D1, 0x66C8, 0x0B9E, 0x239A,
	0x551B, 0x6D6A, 0x1275, 0x3C1B, 0x0CCA, 0x2A0A, 0x7BCF, 0x43A8,
	0x4794, 0x3099, 0x41A1, 0x6AF0, 0x57C0, 0x1D4C, 0x1622, 0x46E0,
	0x3BD2, 0x7CAA, 0x7B8B, 0x195F, 0x146A, 0x79E3, 0x091B, 0x123C,
	0x316A, 0x4763, 0x015F, 0x1C64, 0x7A57, 0x75A7, 0x1DB0, 0x0B59,
	0x3602, 0x2C4F, 0x32FD, 0x3CDF, 0x7567, 0x7975, 0x13CB, 0x02F9,
	0x25D5, 0x2B3E, 0x5379, 0x6A13, 0x0E4F, 0x67AE, 0x4EC9, 0x2F81,
	0x3C33, 0x76C1, 0x1D9C, 0x7C28, 0x2319, 0x72B7, 0x51FD, 0x377B,
	0x73FE, 0x52AF, 0x2861, 0x06AA, 0x6FA2, 0x0377, 0x0D2D, 0x4C15,
	0x382E, 0x02A3, 0x1B79, 0x3B07, 0x661A, 0x2FDC, 0x7914, 0x53A1,
	0x644E, 0x487B, 0x33C8, 0x5B14, 0x5787, 0x4157, 0x03DF, 0x2414,
	0x14FD, 0x72DA, 0x17E5, 0x3B89, 0x6C43, 0x4B5B, 0x4DB0, 0x4D87
}